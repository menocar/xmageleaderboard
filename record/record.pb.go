// Code generated by protoc-gen-go.
// source: record.proto
// DO NOT EDIT!

/*
Package record is a generated protocol buffer package.

It is generated from these files:
	record.proto

It has these top-level messages:
	Match
	Matches
*/
package record

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Match struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DeckType         *string `protobuf:"bytes,2,opt,name=deck_type" json:"deck_type,omitempty"`
	Players          *string `protobuf:"bytes,3,opt,name=players" json:"players,omitempty"`
	GameType         *string `protobuf:"bytes,4,opt,name=game_type" json:"game_type,omitempty"`
	Result           *string `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
	StartTimeMsec    *int64  `protobuf:"varint,6,opt,name=start_time_msec" json:"start_time_msec,omitempty"`
	EndTimeMsec      *int64  `protobuf:"varint,7,opt,name=end_time_msec" json:"end_time_msec,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Match) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Match) GetDeckType() string {
	if m != nil && m.DeckType != nil {
		return *m.DeckType
	}
	return ""
}

func (m *Match) GetPlayers() string {
	if m != nil && m.Players != nil {
		return *m.Players
	}
	return ""
}

func (m *Match) GetGameType() string {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return ""
}

func (m *Match) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *Match) GetStartTimeMsec() int64 {
	if m != nil && m.StartTimeMsec != nil {
		return *m.StartTimeMsec
	}
	return 0
}

func (m *Match) GetEndTimeMsec() int64 {
	if m != nil && m.EndTimeMsec != nil {
		return *m.EndTimeMsec
	}
	return 0
}

type Matches struct {
	Matches          []*Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Matches) Reset()                    { *m = Matches{} }
func (m *Matches) String() string            { return proto.CompactTextString(m) }
func (*Matches) ProtoMessage()               {}
func (*Matches) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Matches) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

func init() {
	proto.RegisterType((*Match)(nil), "record.Match")
	proto.RegisterType((*Matches)(nil), "record.Matches")
}

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8f, 0xc1, 0x6a, 0x84, 0x30,
	0x14, 0x45, 0x51, 0xab, 0xc1, 0x57, 0xad, 0x34, 0x50, 0x9a, 0x55, 0x29, 0xae, 0xec, 0xc6, 0x45,
	0x3f, 0xc1, 0x7d, 0xa1, 0xf4, 0x07, 0x24, 0x24, 0x0f, 0x2b, 0x63, 0x54, 0x92, 0x37, 0x0b, 0x7f,
	0x61, 0xbe, 0x7a, 0x62, 0x74, 0x31, 0xab, 0xe4, 0x9e, 0x7b, 0x08, 0x37, 0x50, 0x58, 0x54, 0x8b,
	0xd5, 0xed, 0x6a, 0x17, 0x5a, 0x78, 0x76, 0xa4, 0xfa, 0x16, 0x41, 0xfa, 0x23, 0x49, 0xfd, 0x73,
	0x80, 0x78, 0xd4, 0x22, 0xfa, 0x8c, 0x9a, 0x94, 0xbf, 0x42, 0xae, 0x51, 0x5d, 0x7a, 0xda, 0x56,
	0x14, 0xb1, 0x47, 0x39, 0xaf, 0x80, 0xad, 0x93, 0xdc, 0xd0, 0x3a, 0x91, 0x04, 0xe0, 0x9d, 0x41,
	0x1a, 0x3c, 0x9c, 0xa7, 0x80, 0x5e, 0xc0, 0x3f, 0xeb, 0xae, 0x13, 0x89, 0x34, 0xe4, 0x77, 0xa8,
	0x1c, 0x49, 0x4b, 0x3d, 0x8d, 0x5e, 0x34, 0x0e, 0x95, 0xc8, 0x7c, 0x91, 0xf0, 0x37, 0x28, 0x71,
	0xd6, 0x0f, 0x98, 0xed, 0xb8, 0xfe, 0x02, 0x16, 0xb6, 0xa0, 0xe3, 0x1f, 0xc0, 0xcc, 0x71, 0xf5,
	0x93, 0x92, 0xe6, 0xf9, 0xbb, 0x6c, 0xcf, 0xfd, 0xc1, 0xe8, 0x6a, 0xe0, 0x46, 0x0e, 0xd8, 0xaa,
	0x69, 0xc4, 0x99, 0xce, 0xae, 0x2b, 0xfe, 0xc2, 0xf9, 0xbb, 0x7f, 0xd1, 0xdd, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x08, 0x43, 0x2f, 0x36, 0xf2, 0x00, 0x00, 0x00,
}
